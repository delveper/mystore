// Code generated by MockGen. DO NOT EDIT.
// Source: contracts.go

// Package rest is a generated GoMock package.
package rest

import (
	context "context"
	reflect "reflect"

	entities "github.com/delveper/mystore/app/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockProductLogic is a mock of ProductLogic interface.
type MockProductLogic struct {
	ctrl     *gomock.Controller
	recorder *MockProductLogicMockRecorder
}

// MockProductLogicMockRecorder is the mock recorder for MockProductLogic.
type MockProductLogicMockRecorder struct {
	mock *MockProductLogic
}

// NewMockProductLogic creates a new mock instance.
func NewMockProductLogic(ctrl *gomock.Controller) *MockProductLogic {
	mock := &MockProductLogic{ctrl: ctrl}
	mock.recorder = &MockProductLogicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductLogic) EXPECT() *MockProductLogicMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockProductLogic) Add(arg0 context.Context, arg1 entities.Product) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockProductLogicMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockProductLogic)(nil).Add), arg0, arg1)
}

// Find mocks base method.
func (m *MockProductLogic) Find(arg0 context.Context, arg1 entities.Product) (*entities.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(*entities.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockProductLogicMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockProductLogic)(nil).Find), arg0, arg1)
}

// FindMany mocks base method.
func (m *MockProductLogic) FindMany(arg0 context.Context) ([]entities.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMany", arg0)
	ret0, _ := ret[0].([]entities.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMany indicates an expected call of FindMany.
func (mr *MockProductLogicMockRecorder) FindMany(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMany", reflect.TypeOf((*MockProductLogic)(nil).FindMany), arg0)
}

// Modify mocks base method.
func (m *MockProductLogic) Modify(arg0 context.Context, arg1 entities.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Modify", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Modify indicates an expected call of Modify.
func (mr *MockProductLogicMockRecorder) Modify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Modify", reflect.TypeOf((*MockProductLogic)(nil).Modify), arg0, arg1)
}

// Remove mocks base method.
func (m *MockProductLogic) Remove(arg0 context.Context, arg1 entities.Product) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remove indicates an expected call of Remove.
func (mr *MockProductLogicMockRecorder) Remove(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockProductLogic)(nil).Remove), arg0, arg1)
}
